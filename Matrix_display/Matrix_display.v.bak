module Matrix_display(clock50MHz, run,reset,row,column);
	input[1:0] run; 
	input[1:0] reset; 
	output[7:0] row,column; 

	reg [7:0] row,column;
	reg [2:0] count;
	always @(posedge clock)
		count <= count + 3'b001


	always @(*)
	begin
	case (count)
		3'b000: row = 8'b00000001;
		3'b001: row = 8'b00000010;
		3'b010: row = 8'b00000100;
		3'b011: row = 8'b00001000;
		3'b100: row = 8'b00010000;
		3'b101: row = 8'b00100000;
		3'b110: row = 8'b01000000;
		3'b111: row = 8'b10000000;
		
		
		
		endcase 
		end
endmodule



module display_rom (clock, address, data_out);
input clock;
input [7:0] address;
output [7:0] data_out;
reg [7:0] data_out;
always @ (posedge clock)
begin
case (address)
8'b00000000: data_out = 8'b00000000;
8'b00000001: data_out = 8'b01111111;
8'b00000010: data_out = 8'b01111111;
8'b00000011: data_out = 8'b01111111;
8'b00000100: data_out = 8'b01111111;
8'b00000101: data_out = 8'b01111111;
8'b00000110: data_out = 8'b01111111;
8'b00000111: data_out = 8'b00000000;

8'b00001000: data_out = 8'b00000000;
8'b00001001: data_out = 8'b01111111;
8'b00001010: data_out = 8'b01111111;
8'b00001011: data_out = 8'b01111111;
8'b00001100: data_out = 8'b00000000;
8'b00001101: data_out = 8'b11111110;
8'b00001110: data_out = 8'b11111110;
8'b00001111: data_out = 8'b00000000;

8'b00010000: data_out = 8'b01111110;
8'b00010001: data_out = 8'b01111110;
8'b00010010: data_out = 8'b01111110;
8'b00010011: data_out = 8'b01111110;
8'b00010100: data_out = 8'b01111110;
8'b00010101: data_out = 8'b01111110;
8'b00010110: data_out = 8'b01111110;
8'b00010111: data_out = 8'b00000000;

endcase
end
endmodule
